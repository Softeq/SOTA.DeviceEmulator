variables:
  - name: verbosity
    value: Normal
  - name: isReleaseOrHotfixBranch
    value: $[or(startsWith(variables['Build.SourceBranch'], 'refs/heads/release'), startsWith(variables['Build.SourceBranch'], 'refs/heads/hotfix'))]
  - name: isMasterOrDevelopBranch
    value: $[or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))]
  - name: isRelease2
    value: $[or(variables['isMasterOrDevelopBranch'], and(variables['isReleaseOrHotfixBranch'], contains(variables['Build.SourceVersionMessage'], '[ci release]')))]
  - name: isRelease
    value: true
trigger:
- master
- develop
- release/*
- hotfix/*
stages:
- stage: Build
  jobs:
  - job: BuildApplication
    displayName: Build application
    pool:
      vmImage: 'windows-2019'
    steps:
    - task: PowerShell@2
      displayName: Print all environment variables
      inputs:
        targetType: inline
        script: gci env:* | sort-object name
    - task: PowerShell@2
      displayName: Test and build application package
      inputs:
        filePath: "build.ps1"
        arguments: "CiBuild --Verbosity $(verbosity)"
    - task: PublishTestResults@2
      displayName: Publish test results
      inputs:
        testRunner: VSTest
        testResultsFiles: 'TestResults/**/*.trx'
        failTaskOnFailedTests: true
    - task: CopyFiles@2
      displayName: Copy artifacts
      condition: variables['isRelease']
      inputs:
        sourceFolder: artifacts
        contents: '**\*'
        targetFolder: $(Build.ArtifactStagingDirectory)
    - task: PublishBuildArtifacts@1
      displayName: Publish artifacts
      condition: variables['isRelease']
      inputs: 
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: ApplicationBinaries
- stage: Release
  condition: variables['isRelease']
  jobs:
    - job: ReleaseApplication
      displayName: Release application
      variables:
        isPreRelease: $[ne(variables['ReleaseType'], 'Stable')]
        isAlpha: $[eq(variables['ReleaseType'], 'Alpha')]
      pool:
        vmImage: 'windows-2019'
      steps:
      - task: PowerShell@2
        displayName: Set release version
        inputs:
          filePath: "build.ps1"
          arguments: "CiSetBuildMetadata --Verbosity $(verbosity)"
      - task: DownloadBuildArtifacts@0
        displayName: Download build artifacts
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: ApplicationBinaries
          downloadPath: '$(System.ArtifactsDirectory)'
      - task: UniversalPackages@0
        displayName: Publish universal package
        inputs:
          command: publish
          publishDirectory: '$(System.ArtifactsDirectory)/ApplicationBinaries'
          vstsFeedPublish: SOTA
          vstsFeedPackagePublish: sota-deviceemulator
          versionOption: custom
          versionPublish: '$(UniversalPackageVersion)'
          packagePublishDescription: '$(UniversalPackageDescription)'
      - task: ArchiveFiles@2
        displayName: Package application binaries
        condition: not(variables['isAlpha'])
        inputs:
          rootFolderOrFile: '$(System.ArtifactsDirectory)/ApplicationBinaries' 
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/SOTA.DeviceEmulator_$(Build.BuildNumber).zip' 
          replaceExistingArchive: true 
      - task: GitHubRelease@0
        displayName: Create GitHub release
        condition: not(variables['isAlpha'])
        inputs:
          gitHubConnection: GitHubReleaseAccessToken
          repositoryName: '$(Build.Repository.Name)' 
          action: 'create'
          target: '$(Build.SourceVersion)'
          tagSource: 'manual'
          tag: '$(ReleaseGitTag)'
          title: '$(UniversalPackageDescription)'
          assets: '$(System.ArtifactsDirectory)/*.zip'
          isPreRelease: '$(isPreRelease)'
          addChangeLog: true